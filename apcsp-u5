colors = ['red', 'blue', 'green']
print colors[0] ## red
print colors[1] ## blue

## print phrases in list

## i is same thing as index. if i (index) is less than 3 (the list's index is only 2), add 1 to the index (i++)

var phrases = ["Hi!", "Hello!", "Hey!"]
onEvent("textInput", "input", function( ) {
  for (vari=0; i < 3; i++)
  setProperty("text"+i, "text", getText("textInput"));
  
  
## check for understanding prac 1

gems <- "ruby", "sapphire", "emerald"
gems <- "garnet", "diamond"
display gems[2]

## the program would display "diamond" ... you assigned new list values (remember code runs top to bottom)

## check for understanding prac 2

luckyNumbers <- [15, 45, 69]
insert [luckyNumbers, 1, 18]
append [luckyNumbers, 79]
remove [luckyNumbers, 3]
display (length[luckyNumbers])

[15, 18, 45, 79]
length is 4

## in AP pseudocode, your index starts at 1.. in most cases starts at 0
## insert - inserts item BEFORE the given index 
## append - adds item to end of list
## remove - removes value at specified index

## QUESTION review
  ## Why is traversal with a for loop a good method for accessing and updating items in a lengthy list? A: allows you to travel thru each item in the list

## Difference between forloop and whileloop and examples
# use forloop when you know that loop should execute n amount of times (ex: you want it to loop 5 times)
# use whileloop when you want user input (executes repeatedly on basis of boolean expression... ex: while x<5)

# if else statements
onEvent("leftButton", "click", function( ) {
  if (index > 0) {
    index = index + 1;
  }
  updateScreen();
  
  ## the above code - on event for button... if statement that claims if var index is greater than 0, the computer sets index = to +1, adding each time button is clicked

## Use a function when you're going to be calling the same code multiple times throughout ur program
## Use loop when you want to loop through the same code all at once

# check for understanding prac 3

count <- 0
REPEAT UNTIL count = 3
count <- count + 1
DISPLAY "and"
DISPLAY count

and 1 and 2 and 3

# display "and" first because code runs top to bottom, displays "and" before displaying the value of count

# check for understanding prac 4

a <- 0
REPEAT 3 TIMES
a <- a + 1
DISPLAY a
a <- a + 1

this would print: 
"1 3 5"
